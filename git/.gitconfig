[core]
	attributesFile = ~/.gitattributes
	excludesFile = ~/.gitignore

[include]
	path = .gitconfig-win

[user]
	name = Samuel D. Leslie
	email = sdl@nexiom.net
	signingkey = 48CB9B43C8BA347C

[github]
	user = ralish

[advice]
	addEmptyPathspec = false
	statusHints = false

[apply]
	whitespace = fix

[branch]
	autoSetupMerge = always
	autoSetupRebase = always

[color]
	interactive = auto
	ui = auto

[diff]
	algorithm = histogram
	compactionHeuristic = true
	indentHeuristic = true
	mnemonicPrefix = true
	renames = copies

[fetch]
	prune = true

[help]
	autoCorrect = 0

[init]
	defaultBranch = main

[log]
	abbrevCommit = true
	follow = true
	mailmap = true

[merge]
	log = true
	conflictStyle = diff3
	defaultToUpstream = true

[oh-my-zsh]
	hide-status = 0

[pull]
	ff = only

[push]
	default = simple
	followTags = true

[rebase]
	autoSquash = true
	autoStash = true
	missingCommitsCheck = warn

[rerere]
	enabled = true
	autoUpdate = true

[status]
	showStash = true
	submoduleSummary = true

[submodule]
	fetchJobs = 4

[diff "utf-16"]
	textconv = "iconv -f utf-16 -t utf-8"

[filter "file-encoding"]
	clean = "GIT_TMP=$(mktemp); GIT_FILE_TYPE=$(tee $GIT_TMP | file --brief --mime-encoding -); cat $GIT_TMP | iconv -sc -f $GIT_FILE_TYPE -t utf-8; rm -f $GIT_TMP"
	smudge = "GIT_TMP=$(mktemp); GIT_FILE_TYPE=$(tee $GIT_TMP | file --brief --mime-encoding -); cat $GIT_TMP | iconv -sc -f utf-8 -t $GIT_FILE_TYPE; rm -f $GIT_TMP"
	required = true

[filter "lfs"]
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
	process = git-lfs filter-process
	required = true

[url "git@bitbucket.org:"]
	insteadof = bb:

[url "git@github.com:"]
	insteadof = gh:

[url "git@gitlab.com:"]
	insteadof = gl:

[url "sdl@git.launchpad.net/"]
	insteadof = lp:

[url "sdl@git.launchpad.net/~sdl/+git/"]
	insteadof = lpme:

[alias]
	a   = add
	aa  = add --all
	ap  = add --patch
	apa = add --patch --all

	bl  = blame

	br  = branch
	brv = branch -vv
	bra = branch --all -vv
	brd = branch --delete

	bs  = bisect
	bsb = bisect bad
	bsg = bisect good
	bsr = bisect reset
	bss = bisect start

	cl  = clone
	clr = clone --recursive

	clf = clean -d -x --force
	cln = clean -d -x --dry-run

	cm  = commit
	cmm = commit --message
	cma = commit --all
	cmv = commit --all --message
	cmx = commit --amend
	cmz = commit --amend --all

	co  = checkout
	cob = checkout -b
	com = "!f() { if git rev-parse -q --verify main > /dev/null; then git checkout main; else git checkout master; fi }; f"

	cp  = cherry-pick
	cpa = cherry-pick --abort
	cpc = cherry-pick --continue
	cps = cherry-pick --skip

	d   = diff
	dw  = diff --ignore-all-space
	dc  = diff --cached
	dcw = diff --cached --ignore-all-space
	dn  = diff --name-status

	f   = fetch
	fa  = fetch --all

	g   = grep

	h   = show
	hw  = show --ignore-all-space
	hs  = show --stat
	hsw = show --stat --ignore-all-space
	h1  = show HEAD~1
	h2  = show HEAD~2
	h3  = show HEAD~3
	h4  = show HEAD~4
	h5  = show HEAD~5
	h6  = show HEAD~6
	h7  = show HEAD~7
	h8  = show HEAD~8
	h9  = show HEAD~9
	h0  = show HEAD~10

	i   = init

	l   = log --notes='*' --graph --abbrev-commit --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%aN>%Creset'
	la  = log --notes='*' --graph --abbrev-commit --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%aN>%Creset' --all
	lm  = "!git log --author=\"$(git config user.name)\" --name-status"
	ln  = log --name-status

	ls  = ls-tree --name-only HEAD
	lsr = ls-tree -r --name-only HEAD

	m   = merge
	ma  = merge --abort
	mm  = "!f() { if git rev-parse -q --verify main > /dev/null; then git merge main; else git merge master; fi }; f"
	mff = merge --ff-only
	mnf = merge --no-ff

	n   = notes

	opt = "!git reflog expire --expire=now --all && git gc --prune=now --aggressive"

	p   = push
	pa  = push --all
	pf  = push --force
	po  = push origin
	pom = "!f() { if git rev-parse -q --verify main > /dev/null; then git push origin main; else git push origin master; fi }; f"
	ps  = push --set-upstream
	pso = push --set-upstream origin
	pt  = push --tags
	pn  = push refs/notes/*

	q   = pull

	rb  = rebase
	rba = rebase --abort
	rbc = rebase --continue
	rbs = rebase --skip
	rbm = "!f() { if git rev-parse -q --verify main > /dev/null; then git rebase main; else git rebase master; fi }; f"
	rbi = rebase -i
	rb1 = rebase -i HEAD~1
	rb2 = rebase -i HEAD~2
	rb3 = rebase -i HEAD~3
	rb4 = rebase -i HEAD~4
	rb5 = rebase -i HEAD~5
	rb5 = rebase -i HEAD~5
	rb6 = rebase -i HEAD~6
	rb7 = rebase -i HEAD~7
	rb8 = rebase -i HEAD~8
	rb9 = rebase -i HEAD~9
	rb0 = rebase -i HEAD~10

	rmv = remote -v
	rma = remote add
	rmp = remote prune
	rmr = remote rm

	rs  = reset
	rsh = reset --hard

	rv  = revert
	rvn = revert --no-commit

	s   = status --short --branch
	sl  = status

	sh  = shortlog --summary --email
	shl = shortlog

	sm  = submodule
	sma = submodule add
	smi = submodule init
	smt = submodule status
	sms = submodule sync
	smu = submodule update

	st  = stash save
	sta = stash apply
	std = stash drop
	stl = stash list
	stp = stash pop
	sts = stash show --patch

	t   = tag
	td  = tag --delete
	tl  = tag --list
	tv  = tag --verify

	up  = "!git remote update --prune && git merge --ff-only @{u}"

# vim: syntax=gitconfig cc=80 tw=79 ts=4 sw=4 sts=4 noet sr
